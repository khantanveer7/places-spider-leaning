# -*- coding: utf-8 -*-

import scrapy
from locations.items import GeojsonPointItem


class BPSpider(scrapy.Spider):
    
    name = "bp_greece_dac"
    brand_name = "BP Oil"
    spider_type = "chain"

    # for metadata properties. keep it in comment.
    # start_urls = ["https://bpretaillocator.geoapp.me/api/v1/locations/nearest_to?format=json&lat=41.293187017&lng=23.866648637"]

    '''
        This API requires coords (lat, lon) and get the 35 nearest points
        A grid of points is created in Greece and the requests are using their coords
        Duplicates are deleted based on 'ref'
        The coords list can be extented in order to get more gas stations in (mostly EU, North America)
    '''
    coords = [[23.866648637,41.293187017], [23.866648637,40.793187017], [24.116648637,41.293187017], [24.116648637,41.043187017], [24.116648637,40.793187017], [24.366648637,41.043187017], [24.616648637,41.293187017], [24.616648637,41.043187017], [24.866648637,41.043187017], [25.116648637,41.043187017], [25.366648637,41.043187017], [25.616648637,41.043187017], [26.116648637,41.043187017], [25.894020793176356,40.86344423842542], [26.366648637,41.543187017], [26.366648637,41.293187017], [21.866648637,40.793187017], [21.866648637,40.293187017], [22.116648637,40.793187017], [22.116648637,40.543187017], [22.116648637,40.293187017], [22.116648637,40.043187017], [22.366648637,40.793187017], [22.366648637,40.543187017], [22.366648637,40.293187017], [22.366648637,40.043187017], [22.616648637,41.043187017], [22.616648637,40.793187017], [22.616648637,40.543187017], [22.866648637,41.043187017], [22.866648637,40.793187017], [23.237905377110344,41.02350782432632], [23.116648637,40.793187017], [23.116648637,40.543187017], [23.366648637,40.793187017], [23.366648637,40.543187017], [23.366648637,40.293187017], [23.616648637,41.043187017], [23.616648637,40.793187017], [23.616648637,40.543187017], [23.616648637,40.293187017], [20.866648637,40.043187017], [21.366648637,40.543187017], [21.366648637,40.293187017], [21.366648637,40.043187017], [21.616648637,40.793187017], [21.616648637,40.543187017], [21.616648637,40.293187017], [21.616648637,40.043187017], [20.366648637,39.543187017], [20.366648637,39.293187017], [20.616648637,40.043187017], [20.616648637,39.793187017], [20.616648637,39.293187017], [20.84940578295106,39.64669178336754], [20.866648637,39.293187017], [21.116648637,39.043187017], [21.366648637,39.043187017], [21.616648637,39.793187017], [21.616648637,39.543187017], [21.616648637,39.293187017], [21.616648637,39.043187017], [21.866648637,39.793187017], [21.866648637,39.543187017], [21.866648637,39.293187017], [21.866648637,39.043187017], [22.116648637,39.793187017], [22.116648637,39.543187017], [22.116648637,39.293187017], [22.116648637,39.043187017], [22.366648637,39.793187017], [22.366648637,39.543187017], [22.366648637,39.293187017], [22.366648637,39.043187017], [22.616648637,39.793187017], [22.616648637,39.543187017], [22.616648637,39.293187017], [22.616648637,39.043187017], [22.866648637,39.543187017], [22.866648637,39.293187017], [22.866648637,39.043187017], [26.79914891691251,37.754525900375135], [26.116648637,39.293187017], [26.116648637,38.293187017], [26.366648637,39.293187017], [26.366648637,39.043187017], [24.866648637,37.793187017], [25.116648637,37.043187017], [25.866648637,36.793187017], [27.116648637,36.793187017], [27.116648637,35.543187017], [28.116648637,36.293187017], [21.616648637,38.793187017], [21.616648637,38.543187017], [21.616648637,38.043187017], [21.866648637,38.793187017], [21.866648637,38.543187017], [21.866648637,38.293187017], [22.116648637,38.043187017], [22.366648637,38.793187017], [22.366648637,38.543187017], [22.366648637,38.043187017], [22.616648637,38.793187017], [22.616648637,38.543187017], [22.616648637,38.043187017], [22.866648637,38.543187017], [22.866648637,38.293187017], [23.116648637,38.543187017], [23.116648637,38.293187017], [23.116648637,38.043187017], [23.366648637,38.793187017], [23.366648637,38.293187017], [23.366648637,38.043187017], [23.616648637,38.293187017], [23.616648637,38.043187017], [23.866648637,38.543187017], [23.86505047567081,38.2229826801349], [23.866648637,38.043187017], [24.116648637,38.543187017], [24.116648637,38.293187017], [24.366648637,38.043187017], [24.616648637,38.793187017], [20.618650683263937,37.99280114956801], [21.116648637,38.793187017], [21.116648637,38.543187017], [21.366648637,38.793187017], [21.366648637,38.543187017], [21.366648637,38.043187017], [21.366648637,37.793187017], [21.766418149623433,37.824392135276135], [21.616648637,37.543187017], [22.116648637,37.793187017], [22.366648637,37.543187017], [21.866648637,37.293187017], [21.999594997196393,37.50465721549806], [22.09145254320998,37.113379399305565], [22.366648637,37.293187017], [22.366648637,37.043187017], [22.366648637,36.793187017], [22.616648637,37.793187017], [22.616648637,37.543187017], [22.616648637,37.293187017], [22.616648637,37.043187017], [22.866648637,37.793187017], [22.866648637,37.543187017], [22.866648637,37.043187017], [22.866648637,36.793187017], [23.116648637,37.793187017], [23.116648637,37.543187017], [23.366648637,37.543187017], [19.866648637,39.793187017], [19.866648637,39.543187017], [23.680089213884575,38.01056398982639], [23.772824906370467,38.074176076407625], [23.756730282054736,37.93162368961112], [22.892219033095316,40.675757135443746], [22.975374592059943,40.60869620079485], [23.65123206372632,37.94325841354595], [23.80012443438496,38.00598328458938], [21.737806704623804,38.24040957030724], [25.166632927231504,39.941936396982676], [24.412214048798937,37.38520940841594], [23.973107661328875,37.826235254664205], [23.584796751471888,38.47220554840753], [23.997496622992,35.38575093774222], [24.866610327582134,35.19143689809809], [25.901774211504527,35.08898040446754]]
    start_urls = [f'https://bpretaillocator.geoapp.me/api/v1/locations/nearest_to?format=json&lat={c[1]}&lng={c[0]}' for c in coords]

    def parse(self, response):
        '''
        @url https://bpretaillocator.geoapp.me/api/v1/locations/nearest_to?format=json&lat=41.293187017&lng=23.866648637
        @returns items 840 852
        @scrapes ref name street city postcode phone opening_hours website lat lon
        '''
        
        responseData = response.json()
        
        for row in responseData:
            days = ['Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su']
            if row['opening_hours'] != []:
                if 'Sun' in row['opening_hours'][0]['days']:
                    end = 6
                elif 'Sat' in row['opening_hours'][0]['days']:
                    end = 5
                elif 'Fr' in row['opening_hours'][0]['days']:
                    end = 4
                opening = f"{days[0]}-{days[end]} {row['opening_hours'][0]['hours'][0][0]}-{row['opening_hours'][0]['hours'][0][1]}"
            else:
                opening = ''

            data = {
                'ref': row['id'],
                'name': row['name'],
                'street': row['address'],
                'city': row['city'],
                'state': row['state'],
                'postcode': row['postcode'],
                'phone': row['telephone'],
                'website': 'https://www.bp.com/el_gr/greece/retail.html',
                'opening_hours': opening,
                'lat': float(row['lat']),
                'lon': float(row['lng']),
            }
            
            yield GeojsonPointItem(**data)