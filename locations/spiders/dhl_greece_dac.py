# -*- coding: utf-8 -*-

import scrapy
import pycountry
from locations.items import GeojsonPointItem
from locations.categories import Code
from typing import List, Dict

class DHLGreeceSpider(scrapy.Spider):
    name: str = 'dhl_greece_dac'
    spider_type: str = 'chain'
    spider_categories: List[str] = [Code.COURIERS]
    spider_countries: List[str] = [pycountry.countries.lookup('gr').alpha_2]
    item_attributes: Dict[str, str] = {'brand': 'DHL'}
    allowed_domains: List[str] = ['dhl.com']

    '''
        MAP
        https://locator.dhl.com/
        The API Request returns the 50 nearest points based on the coords passed.
        Therefore, we need to loop through different areas.
        For Greece the sample points are Greek Towns, and some extra points in major areas like Athens and Thessaloniki
    '''

    # Multiple URLs for requests, based on coords
    coords = [[23.726247807017874,37.975210527592466], [21.429230256804754,38.369122185664], [23.601593023488512,38.465348703727116], [21.79459665712344,38.91725351895345], [22.42947312860401,38.90402402280228], [22.377853553635653,38.528886073459375], [22.37309765920855,37.50979508363712], [21.736220633220785,38.24896246192474], [21.44270834050816,37.67254348189733], [22.929678443624407,37.93909788620271], [22.432810599871967,37.07429942319397], [22.11298046532052,37.041295614461504], [20.897505931677593,37.7881690995464], [19.919799905446535,39.6193107258338], [20.48582897316606,38.178135873883726], [20.707584373186606,38.83360165889573], [20.985991894917806,39.16076110612554], [20.753369865280224,38.960713451745], [21.920872357458098,39.366794224020616], [22.420773619150967,39.6381293988503], [22.934181911197232,39.36398737344569], [21.775763681041692,39.55545802925772], [21.426422756329302,40.08360288066063], [24.152508201268198,41.15045770728842], [22.201750332494843,40.524307347775306], [22.95004010432314,40.63795869934604], [24.41579319215916,40.938866313813726], [21.268399692423298,40.51923683702726], [22.87652926900716,40.9937847237538], [21.78885165609731,40.30171496219446], [22.046070387055014,40.79962787859879], [22.503720945648514,40.271907994941124], [23.549800370976676,41.090235535542895], [21.405523016188898,40.78014312561337], [23.440219134217045,40.37701861861884], [25.872396767969473,40.84840589602756], [24.884252414262395,41.13594113995115], [25.405785901119895,41.118885056686125], [28.227254271721947,36.44321494850548], [24.940125388382256,37.442430034747595], [26.555629295812217,39.107892342393484], [26.975155628809762,37.759010704891104], [26.137369911810932,38.36388006604491], [25.131309775605448,35.33868499707319], [25.716137398247014,35.1899712467773], [24.474609551117005,35.36806860849784], [24.019036663073784,35.51622460053438], [20.857298044323837,39.66874341883537], [20.267969570342956,39.503967180209344], [22.877740551285413,38.43495837529916], [22.808894735567886,37.56818035998855], [23.728099771389864,38.08208007715894], [23.870179000482832,38.014380773992265], [23.62926204680346,37.9559550749649], [23.780092532760843,37.8418099023649]]
    [[23.726247807017874,37.975210527592466], [21.429230256804754,38.369122185664], [23.601593023488512,38.465348703727116], [21.79459665712344,38.91725351895345], [22.42947312860401,38.90402402280228], [22.377853553635653,38.528886073459375], [22.37309765920855,37.50979508363712], [21.736220633220785,38.24896246192474], [21.44270834050816,37.67254348189733], [22.929678443624407,37.93909788620271], [22.432810599871967,37.07429942319397], [20.897505931677593,37.7881690995464], [19.919799905446535,39.6193107258338], [20.48582897316606,38.178135873883726], [20.707584373186606,38.83360165889573], [20.985991894917806,39.16076110612554], [22.420773619150967,39.6381293988503], [22.934181911197232,39.36398737344569], [21.775763681041692,39.55545802925772], [21.426422756329302,40.08360288066063], [22.201750332494843,40.524307347775306], [22.95004010432314,40.63795869934604], [21.268399692423298,40.51923683702726], [21.78885165609731,40.30171496219446], [22.046070387055014,40.79962787859879], [22.503720945648514,40.271907994941124], [23.549800370976676,41.090235535542895], [21.405523016188898,40.78014312561337], [25.872396767969473,40.84840589602756], [24.884252414262395,41.13594113995115], [28.227254271721947,36.44321494850548], [24.940125388382256,37.442430034747595], [26.555629295812217,39.107892342393484], [26.975155628809762,37.759010704891104], [26.137369911810932,38.36388006604491], [25.131309775605448,35.33868499707319], [25.716137398247014,35.1899712467773], [20.857298044323837,39.66874341883537], [22.877740551285413,38.43495837529916], [22.808894735567886,37.56818035998855], [23.728099771389864,38.08208007715894], [23.870179000482832,38.014380773992265], [23.62926204680346,37.9559550749649], [23.780092532760843,37.8418099023649]]
    start_urls = [f"https://wsbexpress.dhl.com/ServicePointLocator/restV3/servicepoints?servicePointResults=50&address=MTM1Mg&countryCode=GR&longitude={c[0]}&latitude={c[1]}&languageScriptCode=Grek&language=gre&languageCountryCode=GB&key=963d867f-48b8-4f36-823d-88f311d9f6ef" for c in coords ]

    def parse(self, response):
        '''
        Parse each response with 50 features
        We are going to get many multiple features and
        we're going to remove them based on ref (facilityId)

        Features: 248 (2022-06-02)
        '''

        responseData = response.json()['servicePoints']

        for row in responseData:
            data = {
                'ref': row['facilityId'],
                'brand': 'DHL',
                'website': 'http://www.dhl.gr/el.html',
                'name': row['localName'],
                'street': row['address']['addressLine1'],
                'postcode':row['address']['zipCode'],
                'city': row['address']['city'],
                'country': row['address']['country'],
                'phone': row['contactDetails']['phoneNumber'],
                'lat': float(row['geoLocation']['latitude']),
                'lon': float(row['geoLocation']['longitude'])
            }
                
            yield GeojsonPointItem(**data)